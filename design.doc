Database project Design Document

8/30/2013

Authors:
Patrick Rock
Juaune Burgess
Ben Creighton

Section 1 Purpose:
The purpose of this project is to create a simple database system and become familiar with version control systems.
We have chosen to use git for version control. 
The app we have chosen to make for this project is a tool to help maximize procrastination. The goal is to schedule activities during freetime which would 
otherwise be wasted by the user. The activities are selected randomly by the application to fill unused time. The system
will use a super-uuber simplistic database to manage the different users and the activities that they are involved in.


Sectction 2 High Level Entities:

App:
  The app allows the user to enter her schedule. The user should also be able to choose what sorts of activites 
  she prefers. The app will examine your schedule and suggest fun activites. 
  
Database Engine:
  The module does the actual manipulation of the database file based on the instructions recieved from the parser.
  It consists of a single class object.

Lexer
  This module tokenizes a string of SQL commands from the user application into tokens that can be used by the parser.
  A token is the simplest unit in a language with lexical significance. 
  The lexer creates a token stream which can be scanned through a token at a time. The token stream can be backed up.

Parser
  This module checks the simplistic SQL syntax of the token stream and then calls the Database Engine functions to exectue
  the commands. The parser uses a recursive descent technique and calls DB engine code as a side effect. 
  The parser performs syntax directed translation. Every production rule in the SQL grammar has a corresponding
  function in the parser class which recognizes it. Terminal expressions call code within the DB engine if they evaluate
  to true.

Data Model
  All data is stored as relationships. Relationships are tuples of values. We need to decide how to represent a relation
  and a table in text for storage.
  
Section 3 Low Level Design:

App design:

Engine design:
  Class DB_Engine
    Members:
      Open_Files - a vector containing all of the file descriptors opened by the database engine.
    Functions:
      Open(String filename) - Opens a database file at a given location
      Close() - Takes a file descriptor and closes the database file
      Write(Relation relation_name) - Creates a new relation database file
      Show(Relation relation_name) - Returns a View showing a given relation
      Show(Table table_name) - Returns a View showing a given entity set
      Create(Table table_name, void* args) - Creates a blank table or entity schema
      Update(Table table_name, Tuple row, int column) - Updates a given column in an entity 
      Insert(Table table_name, void* args) - Inserts a new entity into a table
      Delete(Relation relation_name) - Deletes an entire relation
      Delete(Relation relation_name, Tuple tuple) - Deletes a tuple from a relation
      Select(Relation relation_name, void* args) - Returns a Relation containing the elements of the relation desired
      Project(Relation relation_name, Entity attributes) - Returns the projection of a relation over a set of attributes
      Rename(Relation relation_name) - Renames a relation or entity set
      Operator+(Relation relation_name1, Relation relation_name2) - Returns the union of two relations
      Operator-(Relation relation_name1, Relation relation_name2) - Returns the difference between two relations
      Operator*(Relation relation_name1, Relation relation_name2) - Returns the cartesian product of two relations

Lexer:
  Class Lexer
    Members:
      Token_Stream - a vector containing the tokenized input
    Funtions:
      get_token(int pos) - Returns a token. The argument specifies the token position relative to the current position.
      consume_token() - Returns a token. Consumes one token from the stream. 

Parser:
  Class Parser
    Functions:
      parse(string input): - Parses the input string and returns a status code. Calls DB engine code as a side effect.
      Every production rule in the grammar has a corresponding private function in the Parser.
      These are not listed here as they map directly from the Grammar specification.


Data Model:
  Data is stored persistantly in an ASCII file. A log of all commands executed within the database system is stored.
  When the system is started, it executes the commands in the ASCII file to restore state. This is a very primitive
  and insecure way of storing data. Its main advantage is simplicity.
  
  The data also has an internal data representation when the program is up and running. Table objects and 
  relation objects will hold all data. 
  
Grammar:
  The grammar consists of queries and commands. The complete grammar specification is shown below, lifted from 
  the project assignment page.
  
query ::= relation-name <- expr ;

relation-name ::= identifier

identifier ::= alpha { ( alpha | digit ) }

alpha ::= a | … | z | A | … | Z | _

digit ::= 0 | … | 9

expr ::= atomic-expr 
             | selection
             | projection
             | renaming
             | union
             | difference
             | product

atomic-expr ::= relation-name | ( expr )

selection ::= select ( condition ) atomic-expr

condition ::= conjunction { || conjunction }

conjunction ::= comparison { && comparison }

comparison ::= operand op operand
                     | ( condition )

op ::= == | != | < | > | <= | >=

operand ::= attribute-name | literal

attribute-name ::= identifier
literal ::= intentionally left unspecified

projection ::= project ( attribute-list ) atomic-expr

attribute-list ::= attribute-name { , attribute-name } 

renaming ::= rename ( attribute-list ) atomic-expr

union ::= atomic-expr + atomic-expr

difference ::= atomic-expr - atomic-expr

product ::= atomic-expr * atomic-expr 
 
open-cmd ::== OPEN relation-name 
close-cmd ::== CLOSE relation-name 
write-cmd ::== WRITE relation-name 
exit-cmd ::== EXIT 
show-cmd ::== SHOW atomic-expr 
create-cmd ::= CREATE TABLE relation-name ( typed-attribute-list ) PRIMARY KEY ( attribute-list )

update-cmd ::= UPDATE relation-name SET attribute-name = literal { , attribute-name = literal } WHERE condition 

insert-cmd ::= INSERT INTO relation-name VALUES FROM ( literal { , literal } )
                       | INSERT INTO relation-name VALUES FROM RELATION expr

delete-cmd ::= DELETE FROM relation-name WHERE condition

typed-attribute-list ::= attribute-name type { , attribute-name type }
type ::= VARCHAR ( integer ) | INTEGER
integer ::= digit { digit }



Section 4 Benefits, assumptions, risks/issues:

Benefits:
The database is very simple. It should be easy to build and maintain. The app will help with procrastination.
This should reduce stress and increase the happieness of users. Stress is the silent killer after all.

Assumptions:
  Assuming that the simplistic database will be robust enough to meet the needs of our application.
  We are assuming that we will be able to invent activities for our procrastination app. Relations will be able to 
  contain entities. We are assuming that we will be able to create a system capable of understanding entites within 
  relations. We are assuming that the database will only be used to store entites built from integers and strings.

Risks:
The data is stored in plaintext. This makes the database insecure and vunerable to attack. The app has the potential
to waste the users time.

9/29/2013
Design Updates:
Our design changed as we grew to understand the project requirements more fully. The most dramatic change 
is in the final application. We initially planned to make a calendar style app. The app would provide suggestions
based on your planned activites. This proved to be too complex to implement with the resources available to us. 
We decided instead to make a grocery list management application. This application makes use of the database by 
allowing the user to create and track grocery lists. Each grocery list is a table in the database. Lists can 
be added and delted. Our fututre development plans if we were to continue work on the application include:
allowing lists to be edited, creating a GUI, fixing the database parser to allow persitstant storage of lists. 
